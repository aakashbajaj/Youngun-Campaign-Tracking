"""
Django settings for youngun project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

with open(os.path.join(BASE_DIR, 'secrets.json')) as secrets_file:
    secrets = json.load(secrets_file)


def get_secret(setting, secrets=secrets):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return secrets[setting]
    except KeyError:
        raise ImproperlyConfigured("Set the {} setting".format(setting))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'hiu3*g0haq)r$6*_mc!%-4ad+#31=c^h02=3*+hbivtt!^7!ju'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

DATA_UPLOAD_MAX_NUMBER_FIELDS = None


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',

    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'drfpasswordless',
    'django_q',
    'drf_yasg',

    'django_otp',
    'django_otp.plugins.otp_totp',

    'youngun.apps.authentication',
    'youngun.apps.usermanager',
    'youngun.apps.campaigns',
    'youngun.apps.content',
    'youngun.apps.core',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', )
}

Q_CLUSTER = {
    "name": "youngun",
    "workers": 4,
    "orm": "default",
    "max_attempts": 1,
    "retry": 100000,
    "timeout": 90000
}

PASSWORDLESS_AUTH = {
    'PASSWORDLESS_AUTH_TYPES': ['EMAIL'],
    'PASSWORDLESS_EMAIL_NOREPLY_ADDRESS': 'noreply@youngun.in',
    'PASSWORDLESS_REGISTER_NEW_USERS': False,
    'PASSWORDLESS_AUTH_PREFIX': 'otpauth/'
}

AUTH_USER_MODEL = 'authentication.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

OTP_TOTP_ISSUER = 'Youngun Auth'

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'youngun.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'youngun.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':  get_secret("POSTGRES_DB_NAME"),
        'USER': get_secret("POSTGRES_DB_USER"),
        'PASSWORD': get_secret("POSTGRES_DB_PASSWORD"),
        'HOST': get_secret("POSTGRES_HOST"),
        'PORT': get_secret("POSTGRES_PORT")
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Calcutta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST_USER = get_secret("SENDER_EMAIL")
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_PASSWORD = get_secret("GMAIL_PASSWORD")

AWS_ACCESS_KEY = get_secret("AWS_ACCESS_KEY")
AWS_SECRET = get_secret("AWS_SECRET")
AWS_SESSION_TOKEN = get_secret("AWS_SESSION_TOKEN")
SENDER_ID = get_secret("SENDER_ID")

TWITTER_AUTH_TOKEN = get_secret("TWITTER_AUTH_TOKEN")

SC_API_TOKEN = get_secret("SC_API_TOKEN")

INSTA_COOKIE = get_secret("INSTA_COOKIE")
INSTA_AUTH_TOKEN = get_secret("INSTA_AUTH_TOKEN")

SELF_IG_USERID = get_secret("SELF_IG_USERID")
INSTA_GRAPH_LL_TOKEN = get_secret("INSTA_GRAPH_LL_TOKEN")
